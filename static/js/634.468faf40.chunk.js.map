{"version":3,"file":"static/js/634.468faf40.chunk.js","mappings":"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","sources":["pages/Contacts/Contacts.styled.js","components/ContactForm/ContactForm.styled.js","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/ContactsSection/Filter/Filter.styled.js","components/ContactsSection/Filter/Filter.jsx","components/ContactsSection/ContactList/ContactList.styled.js","components/ContactsSection/ContactListItem/ContactListItem.styled.js","components/ContactsSection/ContactListItem/ContactListItem.jsx","components/ContactsSection/ContactList/ContactList.jsx","components/ContactsSection/ContactsSection.styled.js","components/ContactsSection/ContactsSection.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport ContactsBg from '../../img/contacts_bg.jpeg';\n\nexport const Wrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  padding: 15px;\n  background-color: rgb(0 4 13);\n  background-image: url(${ContactsBg});\n  background-size: cover;\n  background-position: bottom;\n  background-repeat: no-repeat;\n  color: rgb(17 59 126);\n  font-size: 24px;\n  @media screen and (min-width: 768px) {\n    font-size: 26px;\n  }\n  @media screen and (min-width: 1280px) {\n    padding: 40px;\n  }\n`;\nexport const ContactsBox = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  align-items: center;\n  @media screen and (min-width: 1280px) {\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: flex-start;\n  }\n`;\n\nexport const Thumb = styled.div`\n  margin: 15px auto;\n`;\n","import styled from 'styled-components';\n\nexport const ContactFormWrapper = styled.div`\n  flex-basis: 290px;\n  margin: 0 auto;\n  text-align: center;\n  @media screen and (min-width: 768px) {\n    width: 400px;\n  }\n  @media screen and (min-width: 1280px) {\n    margin: 0;\n    flex-basis: 40%;\n  }\n`;\n\nexport const StyledForm = styled.form`\n  width: 100%;\n  margin: 0 auto;\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  border-radius: 1rem;\n  background-color: rgba(255, 255, 255, 0.6);\n  border: 1px solid #2160c4;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  justify-content: flex-end;\n  align-items: baseline;\n  font-size: 26px;\n`;\n\nexport const FormInput = styled.input`\n  width: 70%;\n  margin-top: 5px;\n  margin-left: 5px;\n  @media screen and (min-width: 768px) {\n    margin-top: 0;\n    margin-left: 10px;\n  }\n`;\n\nexport const FormButton = styled.button`\n  width: 200px;\n  margin: 0 auto;\n  padding: 10px;\n  background-color: #2160c4;\n  border: 1px solid transparent;\n  color: #ffffff;\n  &:hover {\n    box-shadow: 8px 8px 24px -7px rgba(28, 33, 141, 1);\n  }\n`;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from 'react';\nimport {\n  StyledForm,\n  FormLabel,\n  FormInput,\n  FormButton,\n  ContactFormWrapper,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact, updateContact } from 'redux/contacts/operations';\nimport { contactsSelectors } from 'redux/contacts/selectors';\nimport { Confirm } from 'notiflix';\nimport { nanoid } from 'nanoid';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.selectContacts);\n\n  const clearForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleNameChange = e => {\n    setName(e.target.value);\n  };\n  const handleNumberChange = e => {\n    setNumber(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isContactExists = contacts.some(\n      existingContact => existingContact.name === name\n    );\n    if (isContactExists) {\n      Confirm.show(\n        `${name} is already in contacts`,\n        \"Would you like to update this contact's number?\",\n        'Yes',\n        'No',\n        () => {\n          const index = contacts.findIndex(contact => contact.name === name);\n          const updatedContact = {\n            id: contacts[index].id,\n            name: contacts[index].name,\n            number: number,\n          };\n          dispatch(updateContact(updatedContact));\n        },\n        () => {},\n        {\n          titleColor: 'rgb(17 59 126)',\n          okButtonBackground: 'rgb(17 59 126)',\n        }\n      );\n      clearForm();\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    clearForm();\n  };\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const buttonText = 'Add contact';\n\n  return (\n    <ContactFormWrapper>\n      <StyledForm onSubmit={handleSubmit}>\n        <FormLabel htmlFor={nameInputId}>\n          Name\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={name}\n            onChange={handleNameChange}\n            id={nameInputId}\n            required\n          />\n        </FormLabel>\n        <FormLabel htmlFor={numberInputId}>\n          Number\n          <FormInput\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            id={numberInputId}\n            value={number}\n            onChange={handleNumberChange}\n            required\n          />\n        </FormLabel>\n        <FormButton type=\"submit\">{buttonText.toUpperCase()}</FormButton>\n      </StyledForm>\n    </ContactFormWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  text-align: center;\n`;\n\nexport const FilterInput = styled.input`\n  width: 70%;\n`;\n","import { nanoid } from 'nanoid';\nimport { FilterInput, FilterLabel } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleFilter } from 'redux/contacts/filterSlice';\nimport { contactsSelectors } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filterValue = useSelector(contactsSelectors.selectFilterValue);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(toggleFilter(value));\n  };\n\n  const filterInputId = nanoid();\n  return (\n    <>\n      <FilterLabel htmlFor={filterInputId}>Find contacts by name</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        id={filterInputId}\n        onChange={handleChange}\n        value={filterValue}\n      ></FilterInput>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledContactList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  gap: 15px;\n  justify-content: flex-start;\n  align-items: center;\n  font-size: 26px;\n  @media screen and (max-width: 767px) {\n    flex-direction: column;\n  }\n`;\n\nexport const DeleteButton = styled.button`\n  width: 65px;\n  background-color: #ffffff;\n  border: 1px solid #2160c4;\n  color: #2160c4;\n  font-size: 16px;\n  &:active {\n    background-color: #2160c4;\n    color: #ffffff;\n  }\n`;\n","import { ContactItem, DeleteButton } from './ContactListItem.styled';\nimport { contactsSelectors } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Avatar } from '@mui/material';\n\nexport const ContactListItem = () => {\n  const filtredContacts = useSelector(contactsSelectors.selectFiltredContacts);\n  const dispatch = useDispatch();\n  const handleClick = e => {\n    dispatch(deleteContact(e.target.id));\n  };\n\n  return filtredContacts.map(contact => (\n    <ContactItem key={contact.id}>\n      <Avatar sx={{ bgcolor: '#3A526A' }} />\n      <span>{contact.name}</span>\n      <span>{contact.number}</span>\n      <DeleteButton id={contact.id} onClick={handleClick}>\n        Delete\n      </DeleteButton>\n    </ContactItem>\n  ));\n};\n","import { useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts/selectors';\nimport { StyledContactList } from './ContactList.styled';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\n\nexport const ContactList = () => {\n  const filtredContacts = useSelector(contactsSelectors.selectFiltredContacts);\n\n  return filtredContacts.length ? (\n    <StyledContactList>\n      <ContactListItem />\n    </StyledContactList>\n  ) : (\n    <p>There are no contacts with such a name</p>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  flex-basis: 40%;\n  padding: 30px 15px 15px 15px;\n  border-radius: 1rem;\n  background-color: rgba(255, 255, 255, 0.6);\n  border: 1px solid #2160c4;\n`;\n\nexport const Thumb = styled.div`\n  margin: 15px auto;\n`;\n","import { contactsSelectors } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\nimport { Filter } from './Filter/Filter';\nimport { ContactList } from './ContactList/ContactList';\nimport { StyledSection, Thumb } from './ContactsSection.styled';\n\nexport const ContactsSection = () => {\n  const contacts = useSelector(contactsSelectors.selectContacts);\n\n  return (\n    <StyledSection>\n      <h2>Contacts</h2>\n      {contacts.length ? <Filter /> : null}\n      {contacts.length ? (\n        <ContactList />\n      ) : (\n        <Thumb>\n          <p>There are no contacts yet</p>\n        </Thumb>\n      )}\n    </StyledSection>\n  );\n};\n","import { Wrapper, Thumb, ContactsBox } from './Contacts.styled';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Notify } from 'notiflix';\nimport { authSelectors } from 'redux/auth/selectors';\nimport { ContactsSection } from 'components/ContactsSection/ContactsSection';\n\nconst Contacts = () => {\n  const error = useSelector(contactsSelectors.selectError);\n  const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    document.body.classList.add('contacts-bg');\n\n    return () => {\n      document.body.classList.remove('contacts-bg');\n    };\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      Notify.failure('An error occured. Try again later.');\n    }\n  }, [error]);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return isLoggedIn ? (\n    <Wrapper>\n      {error && <p>{`Error: ${error}`}</p>}\n      <ContactsBox>\n        <ContactForm />\n        <ContactsSection />\n      </ContactsBox>\n    </Wrapper>\n  ) : (\n    <Thumb>Please log in to see the contacts list</Thumb>\n  );\n};\n\nexport default Contacts;\n"],"names":["Wrapper","styled","ContactsBg","ContactsBox","Thumb","ContactFormWrapper","StyledForm","FormLabel","FormInput","FormButton","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","contactsSelectors","clearForm","nameInputId","numberInputId","onSubmit","e","preventDefault","some","existingContact","Confirm","index","findIndex","contact","updatedContact","updateContact","titleColor","okButtonBackground","addContact","htmlFor","type","pattern","title","value","onChange","target","required","FilterLabel","FilterInput","Filter","filterValue","filterInputId","toLowerCase","toggleFilter","StyledContactList","ContactItem","DeleteButton","ContactListItem","filtredContacts","handleClick","deleteContact","map","Avatar","sx","bgcolor","onClick","ContactList","length","StyledSection","ContactsSection","error","isLoggedIn","authSelectors","useEffect","document","body","classList","add","remove","Notify","fetchContacts"],"sourceRoot":""}