{"version":3,"file":"static/js/863.63b8ecae.chunk.js","mappings":"uOAEaA,EAAUC,EAAAA,QAAAA,IAAH,2KAWPC,EAAQD,EAAAA,QAAAA,IAAH,4C,oBCXLE,EAAaF,EAAAA,QAAAA,KAAH,+LAWVG,EAAYH,EAAAA,QAAAA,MAAH,4FAMTI,EAAYJ,EAAAA,QAAAA,MAAH,6JAUTK,EAAaL,EAAAA,QAAAA,OAAH,yN,4DChBVM,EAAc,WACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,gBAEvBC,EAAY,WAChBR,EAAQ,IACRE,EAAU,GACX,EAuBKO,GAAcC,EAAAA,EAAAA,MACdC,GAAgBD,EAAAA,EAAAA,MAGtB,OACE,UAACjB,EAAD,CAAYmB,SAnBO,SAAAC,GAKnB,GAJAA,EAAEC,iBACsBT,EAASU,MAC/B,SAAAC,GAAe,OAAIA,EAAgBjB,OAASA,CAA7B,IAKf,OAFAkB,EAAAA,OAAAA,KAAA,UAAelB,EAAf,iCACAS,IAGFL,GAASe,EAAAA,EAAAA,IAAW,CAAEnB,KAAAA,EAAME,OAAAA,KAC5BO,GACD,EAOC,WACE,UAACd,EAAD,CAAWyB,QAASV,EAApB,kBAEE,SAACd,EAAD,CACEyB,KAAK,OACLrB,KAAK,OACLsB,QAAQ,yHACRC,MAAM,yIACNC,MAAOxB,EACPyB,SAnCiB,SAAAX,GACvBb,EAAQa,EAAEY,OAAOF,MAClB,EAkCOG,GAAIjB,EACJkB,UAAQ,QAGZ,UAACjC,EAAD,CAAWyB,QAASR,EAApB,oBAEE,SAAChB,EAAD,CACEyB,KAAK,MACLrB,KAAK,SACLsB,QAAQ,yFACRC,MAAM,+FACNI,GAAIf,EACJY,MAAOtB,EACPuB,SA9CmB,SAAAX,GACzBX,EAAUW,EAAEY,OAAOF,MACpB,EA6COI,UAAQ,QAGZ,SAAC/B,EAAD,CAAYwB,KAAK,SAAjB,SA9Be,cA8BuBQ,kBAG3C,EC7EYC,GAAYtC,EAAAA,EAAAA,SAAOC,EAAPD,CAAH,mFAMTuC,EAAcvC,EAAAA,QAAAA,MAAH,2C,UCHXwC,EAAS,WACpB,IAAMC,GAAc1B,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,mBAC1BJ,GAAWC,EAAAA,EAAAA,MAOX6B,GAAgBvB,EAAAA,EAAAA,MACtB,OACE,UAACmB,EAAD,YACE,kBAAOV,QAASc,EAAhB,oCACA,SAACH,EAAD,CACEV,KAAK,OACLM,GAAIO,EACJT,SAZe,SAAAX,GACnB,IAAMU,EAAQV,EAAEY,OAAOF,MAAMW,cAC7B/B,GAASgC,EAAAA,EAAAA,GAAaZ,GACvB,EAUKA,MAAOS,MAId,ECzBYI,EAAoB7C,EAAAA,QAAAA,GAAH,uGCAjB8C,EAAc9C,EAAAA,QAAAA,GAAH,gMAYX+C,EAAe/C,EAAAA,QAAAA,OAAH,+LCTZgD,EAAkB,WAC7B,IAAMC,GAAkBlC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,uBAC9BJ,GAAWC,EAAAA,EAAAA,MACXqC,EAAc,SAAA5B,GAClBV,GAASuC,EAAAA,EAAAA,IAAc7B,EAAEY,OAAOC,IACjC,EAED,OAAOc,EAAgBG,KAAI,SAAAC,GAAO,OAChC,UAACP,EAAD,YACE,0BAAOO,EAAQ7C,QACf,0BAAO6C,EAAQ3C,UACf,SAACqC,EAAD,CAAcZ,GAAIkB,EAAQlB,GAAImB,QAASJ,EAAvC,sBAHgBG,EAAQlB,GADM,GASnC,EChBYoB,EAAc,WAGzB,OAFwBxC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,uBAEbwC,QACrB,SAACX,EAAD,WACE,SAACG,EAAD,OAGF,iEAEH,E,UC+BD,EAnCiB,WACf,IAAMlC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,gBACvByC,GAAQ1C,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,aACpB0C,GAAa3C,EAAAA,EAAAA,IAAY4C,EAAAA,EAAAA,kBACzB/C,GAAWC,EAAAA,EAAAA,MAYjB,OAVA+C,EAAAA,EAAAA,YAAU,WACJH,GACF/B,EAAAA,OAAAA,QAAe,qCAElB,GAAE,CAAC+B,KAEJG,EAAAA,EAAAA,YAAU,WACRhD,GAASiD,EAAAA,EAAAA,MACV,GAAE,CAACjD,IAEG8C,GACL,UAAC3D,EAAD,WACG0D,IAAS,wCAAcA,MACxB,SAACnD,EAAD,KACA,qCACCQ,EAAS0C,QAAS,SAAChB,EAAD,IAAa,KAC/B1B,EAAS0C,QACR,SAACD,EAAD,KAEA,SAACtD,EAAD,WACE,2DAKN,SAACA,EAAD,oDAEH,C","sources":["pages/Contacts/Contacts.styled.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\nwidth: 300px;\npadding: 20px;\nmargin: 0 auto;\ntext-align: center;\n@media screen and (min-width: 768px) {\n  width: 500px;\n  padding: 40px;\n}\n`;\n\nexport const Thumb = styled.div`\nmargin: 15px auto;\n`;","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\nmargin: 20px auto;\npadding: 40px;\ndisplay: flex;\nflex-direction: column;\ngap: 20px;\nborder-radius: 1rem;\nbackground-color: #ffffff;\nborder: 1px solid #2160c4;\n`;\n\nexport const FormLabel = styled.label`\ndisplay: flex;\njustify-content: flex-end;\nalign-items: baseline;\n`;\n\nexport const FormInput = styled.input`\nwidth: 70%;\nmargin-top: 5px;\nmargin-left: 5px;\n@media screen and (min-width: 768px) {\n  margin-top: 0;\n  margin-left: 10px;\n}\n`;\n\nexport const FormButton = styled.button`\nwidth: 200px;\nmargin: 0 auto;\npadding: 10px;\nbackground-color: #2160c4;\nborder: 1px solid transparent;\ncolor: #ffffff;\n&:hover{\n  box-shadow: 8px 8px 24px -7px rgba(28, 33, 141, 1);\n}\n`\n","import { useState } from 'react';\nimport {\n  StyledForm,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { contactsSelectors } from 'redux/contacts/selectors';\nimport { Notify } from 'notiflix';\nimport { nanoid } from 'nanoid';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.selectContacts);\n\n  const clearForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleNameChange = e => {\n    setName(e.target.value);\n  };\n  const handleNumberChange = e => {\n    setNumber(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isContactExists = contacts.some(\n      existingContact => existingContact.name === name\n    );\n    if (isContactExists) {\n      Notify.info(`${name} is already in contacts`);\n      clearForm();\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    clearForm();\n  };\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const buttonText = 'Add contact';\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <FormLabel htmlFor={nameInputId}>\n        Name\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={name}\n          onChange={handleNameChange}\n          id={nameInputId}\n          required\n        />\n      </FormLabel>\n      <FormLabel htmlFor={numberInputId}>\n        Number\n        <FormInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          id={numberInputId}\n          value={number}\n          onChange={handleNumberChange}\n          required\n        />\n      </FormLabel>\n      <FormButton type=\"submit\">{buttonText.toUpperCase()}</FormButton>\n    </StyledForm>\n  );\n};\n","import styled from 'styled-components';\nimport { Thumb } from 'pages/Contacts/Contacts.styled';\n\nexport const FilterDiv = styled(Thumb)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const FilterInput = styled.input`\n  margin: 0 auto;\n`;\n","import { nanoid } from 'nanoid';\nimport { FilterDiv, FilterInput } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleFilter } from 'redux/contacts/filterSlice';\nimport { contactsSelectors } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filterValue = useSelector(contactsSelectors.selectFilterValue);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(toggleFilter(value));\n  };\n\n  const filterInputId = nanoid();\n  return (\n    <FilterDiv>\n      <label htmlFor={filterInputId}>Find contacts by name</label>\n      <FilterInput\n        type=\"text\"\n        id={filterInputId}\n        onChange={handleChange}\n        value={filterValue}\n      ></FilterInput>\n    </FilterDiv>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledContactList = styled.ul`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\njustify-content: center;\n`","import styled from \"styled-components\";\n\nexport const ContactItem = styled.li`\ndisplay: flex;\ngap: 15px;\njustify-content: center;\nfont-size: 22px;\n@media screen and (max-width: 767px) {\n  flex-direction: column;\n  align-items: center;\n\n}\n`;\n\nexport const DeleteButton = styled.button`\nwidth: 65px;\nbackground-color: #ffffff;\nborder: 1px solid #2160c4;\ncolor: #2160c4;\nfont-size: 16px;\n&:active {\n  background-color: #2160c4;\ncolor: #ffffff;\n}\n`","import { ContactItem, DeleteButton } from './ContactListItem.styled';\nimport { contactsSelectors } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactListItem = () => {\n  const filtredContacts = useSelector(contactsSelectors.selectFiltredContacts);\n  const dispatch = useDispatch();\n  const handleClick = e => {\n    dispatch(deleteContact(e.target.id));\n  };\n\n  return filtredContacts.map(contact => (\n    <ContactItem key={contact.id}>\n      <span>{contact.name}</span>\n      <span>{contact.number}</span>\n      <DeleteButton id={contact.id} onClick={handleClick}>\n        Delete\n      </DeleteButton>\n    </ContactItem>\n  ));\n};\n","import { useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts/selectors';\nimport { StyledContactList } from './ContactList.styled';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\n\nexport const ContactList = () => {\n  const filtredContacts = useSelector(contactsSelectors.selectFiltredContacts);\n\n  return filtredContacts.length ? (\n    <StyledContactList>\n      <ContactListItem />\n    </StyledContactList>\n  ) : (\n    <p>There are no contacts with such a name</p>\n  );\n};\n","import { Wrapper, Thumb } from './Contacts.styled';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Notify } from 'notiflix';\nimport { authSelectors } from 'redux/auth/selectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(contactsSelectors.selectContacts);\n  const error = useSelector(contactsSelectors.selectError);\n  const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (error) {\n      Notify.failure('An error occured. Try again later.');\n    }\n  }, [error]);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return isLoggedIn ? (\n    <Wrapper>\n      {error && <p>{`Error: ${error}`}</p>}\n      <ContactForm />\n      <h2>Contacts</h2>\n      {contacts.length ? <Filter /> : null}\n      {contacts.length ? (\n        <ContactList />\n      ) : (\n        <Thumb>\n          <p>There are no contacts yet</p>\n        </Thumb>\n      )}\n    </Wrapper>\n  ) : (\n    <Thumb>Please log in to see the contacts list</Thumb>\n  );\n};\n\nexport default Contacts;\n"],"names":["Wrapper","styled","Thumb","StyledForm","FormLabel","FormInput","FormButton","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","contactsSelectors","clearForm","nameInputId","nanoid","numberInputId","onSubmit","e","preventDefault","some","existingContact","Notify","addContact","htmlFor","type","pattern","title","value","onChange","target","id","required","toUpperCase","FilterDiv","FilterInput","Filter","filterValue","filterInputId","toLowerCase","toggleFilter","StyledContactList","ContactItem","DeleteButton","ContactListItem","filtredContacts","handleClick","deleteContact","map","contact","onClick","ContactList","length","error","isLoggedIn","authSelectors","useEffect","fetchContacts"],"sourceRoot":""}